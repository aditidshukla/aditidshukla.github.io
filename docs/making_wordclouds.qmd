---
title: "How to Make Word Clouds in R"
author: "Aditi Shukla"
format: html
embed-resources: true
editor: visual
---

## Introduction

This tutorial shows you to make word clouds using your dataset in R. Here, we'll use an open source dataset from Kaggle that includes IMDB movie reviews.

## Required libraries

First, download the following libraries

```{r}
library(tidyverse) # Installs the Tidyverse
library(RColorBrewer) # Provides colour palettes
library(tm) # Mines the text in your dataset
library(stringr) # Allows you to work with text string
library(wordcloud) # Creates the word clouds
```

## Download the data

The following command downloads a .csv file containing IMDB movie ratings. The IMDB dataset is taken from Kaggle, and you can access its raw form here: <https://www.kaggle.com/datasets/harshitshankhdhar/imdb-dataset-of-top-1000-movies-and-tv-shows?resource=download>

```{r}
movie_data <- read.csv("https://raw.githubusercontent.com/aditidshukla/worldcloud_imdb_data/refs/heads/main/imdb_top_1000.csv")
```

## Subset the data

We will now subset the data to keep only the "Overview" column, which contains synopses for the movies. This column is ideal for word clouds, as it contains character strings.

```{r}
# Check column names to make sure there an "Overview" column
colnames(movie_data) 

# Subset the data to only keep the "Overview" column
movie_overviews <- movie_data$Overview 
```

## Convert each row into a character string

```{r}
movie_overviews_corpus <- Corpus(
  VectorSource(
    movie_overviews
    )
  )

# Corpus() converts the data to a corpus
# VectorSource() converts each element of the corpus as a document
```

```{r}
#| output: false
# Check the data to make sure your corpus is formatted correctly
inspect(movie_overviews_corpus)
```

## Pre-process the data

```{r}
# Convert the text to lower case
movie_overviews_corpus <- tm_map(
  movie_overviews_corpus, content_transformer(
    tolower)
  )

# Remove numbers
movie_overviews_corpus <- tm_map(
  movie_overviews_corpus, removeNumbers
  )

# Remove english common stopwords
movie_overviews_corpus <- tm_map(
  movie_overviews_corpus, removeWords, stopwords(
    "english")
  )

# Remove words you don't want to include in the dataset
movie_overviews_corpus <- tm_map(
  movie_overviews_corpus, removeWords, c(
    "movie", "film", "show"
    )
  ) 

# Remove punctuations
movie_overviews_corpus <- tm_map(
  movie_overviews_corpus, removePunctuation
  )

# Eliminate extra white spaces
movie_overviews_corpus <- tm_map(
  movie_overviews_corpus, stripWhitespace
  )
```

## Convert the data into a numerical matrix, then a data frame

```{r}
# Convert the data to a numerical matrix
movie_overviews_tdm <- TermDocumentMatrix(
  movie_overviews_corpus
  )

movie_overviews_matrix <- as.matrix(
  movie_overviews_tdm
  )

# Count the frequency of words in your matrix 
sorted_movie_overviews_matrix <- sort(
  rowSums(
    movie_overviews_matrix
    ), decreasing = TRUE
  )

# Convert the matrix into a data frame, then count the frequency of words
movie_overviews_data <- data.frame(
  word = names(
    sorted_movie_overviews_matrix
    ), freq = sorted_movie_overviews_matrix
  )

# Check the data as a sanity check
head(movie_overviews_data, 10)

# Create the word cloud
wordcloud(
  words = movie_overviews_data$word, 
  freq = movie_overviews_data$freq, 
  min.freq = 1,
  max.words = 100, 
  random.order = FALSE, 
  colors = brewer.pal(8, "Paired"))
```

### You did it! Congratulations :)
