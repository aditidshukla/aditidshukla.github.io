---
title: "How to Merge Datasets"
author: "Aditi Shukla"
date: "November 20, 2024"
format: html
embed-resources: true
editor: visual
---

## Introduction

This tutorial teaches you how to merge two datasets. Here, we'll use two built-in R datasets, select specific columns we want to keep, and merge the datasets together.

Let's say we're interested in looking at how different flowers grow in different air qualities and at different times of the year. For this, we will use the `airquality` and `iris` datasets.

## Download required libraries and datasets

First, download the required libraries and datasets we will use in this tutorial.

```{r}
library(tidyverse) # Installs the Tidyverse
library(DT) # Allows you to make datatables (for dataset output)

data("airquality",
     "iris")
```

## Select the columns and rows we want to keep

Here, we will use the `select` function from the Tidyverse package to choose the columns we want to keep in each dataset. We will then save the selected columns into a new dataset.

### airquality

Let's say we're only interested in keeping the `wind`, `temperature`, and `month` variables.

```{r}
airquality_req <- select(
  airquality, Wind, Temp, Month
)
```

### iris

Let's say we're only interested in keeping the `Sepal.Length`, `Petal.Length`, and `Species` variables. We're also only interested in looking at the `setosa` and `virginica` species types, not the `versicolor` species.

```{r}
iris_req <- select(
  iris, Sepal.Length, Petal.Length, Species
)
```

We're also only interested in looking at the `setosa` and `virginica` species types, not the `versicolor` species.

```{r}
iris_req <- filter(
  iris_req, Species == "setosa"|
    Species == "virginica"
  )
```

## Make sure the datasets have the same number of rows

Our next steps will only work if the datasets have the same number of rows. Since `iris_req` already has `100` rows, we will delete some rows from `airquality_req` to that dataset also has `100` rows.

### airquality

```{r}
airquality_req_cut <- airquality_req %>%
   slice(-c(101:153))
```

## Merging the datasets

To use the `merge` function, we need unique identifiers. Unique identifiers are variables that are shared by two datasets, and they are the variables by which two datasets are merged.

Since these two datasets don't naturally have shared variables, we need to create a new variable for each dataset that is the same. We'll make a random variable here that we will use as the unique identifier.

```{r}
airquality_req_cut$identifier <- rep(
  c(1, 2, 3, 4, 5), 
  each = 4
  )

iris_req$identifier <- rep(
  c(1, 2, 3, 4, 5),
  each = 4)
```

We now have a new column/variable in both datasets called `identifier`. We can now merge the datasets!

```{r}
merged_data <- merge(
  airquality_req_cut, iris_req, 
  by = c("identifier")
  )
```

## View the merged dataset

```{r}
datatable(merged_data)
```

### You did it! Congratulations :)
